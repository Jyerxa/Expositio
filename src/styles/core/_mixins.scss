// Utility Mixins for Professional Presentation Template

// Responsive Breakpoints Mixin
@mixin respond-to($breakpoint) {
  @if $breakpoint ==xs {
    @media (min-width: 0) {
      @content;
    }
  }

  @if $breakpoint ==sm {
    @media (min-width: 576px) {
      @content;
    }
  }

  @if $breakpoint ==md {
    @media (min-width: 768px) {
      @content;
    }
  }

  @if $breakpoint ==lg {
    @media (min-width: 992px) {
      @content;
    }
  }

  @if $breakpoint ==xl {
    @media (min-width: 1200px) {
      @content;
    }
  }

  @if $breakpoint ==xxl {
    @media (min-width: 1400px) {
      @content;
    }
  }
}

// Max-width responsive mixin
@mixin respond-down($breakpoint) {
  @if $breakpoint ==sm {
    @media (max-width: 575.98px) {
      @content;
    }
  }

  @if $breakpoint ==md {
    @media (max-width: 767.98px) {
      @content;
    }
  }

  @if $breakpoint ==lg {
    @media (max-width: 991.98px) {
      @content;
    }
  }

  @if $breakpoint ==xl {
    @media (max-width: 1199.98px) {
      @content;
    }
  }

  @if $breakpoint ==xxl {
    @media (max-width: 1399.98px) {
      @content;
    }
  }
}

// Min-width responsive alias for clarity
@mixin respond-up($breakpoint) {
  @include respond-to($breakpoint) {
    @content;
  }
}

// Viewport-based responsive sizing
@mixin responsive-size($property, $min-size, $max-size, $min-vw: 320px, $max-vw: 1200px) {
  #{$property}: $min-size;

  @media (min-width: #{$min-vw}) {
    #{$property}: calc(#{$min-size} + (#{strip-unit($max-size - $min-size)}) * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
  }

  @media (min-width: #{$max-vw}) {
    #{$property}: $max-size;
  }
}

// Strip unit helper function
@function strip-unit($number) {
  @if type-of($number)=='number' and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}

// Clamp-based responsive sizing (modern approach)
@mixin fluid-size($property, $min, $preferred, $max) {
  #{$property}: clamp(#{$min}, #{$preferred}, #{$max});
}

// Glassmorphism effect
@mixin glass-effect($opacity: 0.4, $blur: 12px) {
  background: rgba(20, 30, 50, $opacity);
  backdrop-filter: blur($blur);
  -webkit-backdrop-filter: blur($blur);
}

// Glow effect mixin
@mixin glow($color, $intensity: 0.2, $size: 12px) {
  box-shadow: 0 0 $size rgba($color, $intensity);
}

// Advanced glow with multiple layers
@mixin multi-glow($color, $spread: 12px, $intensity: 0.2) {
  box-shadow:
    0 0 ($spread * 0.5) rgba($color, $intensity * 2),
    0 0 $spread rgba($color, $intensity),
    0 0 ($spread * 2) rgba($color, $intensity * 0.5);
}

// Focus state for accessibility
@mixin focus-ring($color: var(--color-focus), $width: 2px, $offset: 2px) {
  outline: $width solid $color;
  outline-offset: $offset;
  border-radius: var(--border-radius-small);
}

// Hide visually but keep for screen readers
@mixin visually-hidden {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

// Hover and focus states
@mixin hover-focus {

  &:hover,
  &:focus {
    @content;
  }
}

// Active state
  &:active,
  &.active {
    @content;
  }
}

// Button reset
@mixin button-reset {
  background: none;
  border: none;
  padding: 0;
  font: inherit;
  cursor: pointer;
  outline: inherit;
}

// Flexbox utilities
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin flex-between {
  display: flex;
  align-items: center;
  justify-content: space-between;
}

@mixin flex-column {
  display: flex;
  flex-direction: column;
}

// Grid utilities
@mixin grid-center {
  display: grid;
  place-items: center;
}

// Text truncation
@mixin truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

@mixin truncate-lines($lines: 2) {
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

// Smooth font rendering
@mixin font-smoothing {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

// High DPI / Retina support
@mixin retina {

  @media only screen and (-webkit-min-device-pixel-ratio: 2),
  only screen and (min--moz-device-pixel-ratio: 2),
  only screen and (-o-min-device-pixel-ratio: 2/1),
  only screen and (min-device-pixel-ratio: 2),
  only screen and (min-resolution: 192dpi),
  only screen and (min-resolution: 2dppx) {
    @content;
  }
}

// Animation utilities
@mixin animate($property: all, $duration: var(--transition-base), $easing: ease) {
  transition: $property $duration $easing;
}

// Slide transition effects
@mixin slide-in($direction: left, $distance: 20px) {
  opacity: 0;
  transform: translateX(if($direction ==left, -$distance, $distance));
  transition: opacity var(--transition-slow), transform var(--transition-slow);

  &.visible {
    opacity: 1;
    transform: translateX(0);
  }
}

@mixin slide-up($distance: 20px) {
  opacity: 0;
  transform: translateY($distance);
  transition: opacity var(--transition-slow), transform var(--transition-slow);

  &.visible {
    opacity: 1;
    transform: translateY(0);
  }
}

// Container queries (future-proofing)
@mixin container($name: sidebar, $size: 300px) {
  container-type: inline-size;
  container-name: $name;
}

// Theme-aware color mixing
@mixin theme-color($property, $color, $mix-color: transparent, $mix-amount: 0%) {
  #{$property}: mix($mix-color, $color, $mix-amount);
}

// Aspect ratio (fallback for older browsers)
@mixin aspect-ratio($width, $height) {
  aspect-ratio: #{$width} / #{$height};

  // Fallback for older browsers
  @supports not (aspect-ratio: 1 / 1) {
    position: relative;
    height: 0;
    padding-bottom: percentage($height / $width);

    &>* {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
    }
  }
}